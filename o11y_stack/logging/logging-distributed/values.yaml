logging:
  gateway:
    image: 
      registry: docker.io    
      repository: nginxinc/nginx-unprivileged
      tag: 1.27.3-alpine
    enabled: true
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
    resources:
      requests:
        memory: 300Mi
        cpu: 0.3
      limits:
        memory: 500Mi
        cpu: 0.5
    nodeSelector:
      environment: dev
      workload-type: on-demand
      team: devops
      node_group: monit-logging
    nginxConfig:
      file: |
        worker_processes  5;  ## Default: 1
        error_log  /dev/stderr;
        pid        /tmp/nginx.pid;
        worker_rlimit_nofile 8192;

        events {
          worker_connections  4096;  ## Default: 1024
        }

        http {
          client_body_temp_path /tmp/client_temp;
          proxy_temp_path       /tmp/proxy_temp_path;
          fastcgi_temp_path     /tmp/fastcgi_temp;
          uwsgi_temp_path       /tmp/uwsgi_temp;
          scgi_temp_path        /tmp/scgi_temp;
          
          client_max_body_size  5M;

          proxy_http_version    1.1;

          default_type application/octet-stream;
          log_format   {{ .Values.gateway.nginxConfig.logFormat }}

          {{- if .Values.gateway.verboseLogging }}
          access_log   /dev/stderr  main;
          {{- else }}

          map $status $loggable {
            ~^[23]  0;
            default 1;
          }
          access_log   /dev/stderr  main  if=$loggable;
          {{- end }}

          sendfile     on;
          tcp_nopush   on;
          {{- if .Values.gateway.nginxConfig.resolver }}
          resolver {{ .Values.gateway.nginxConfig.resolver }};
          {{- else }}
          resolver {{ .Values.global.dnsService }}.{{ .Values.global.dnsNamespace }}.svc.{{ .Values.global.clusterDomain }};
          {{- end }}

          {{- with .Values.gateway.nginxConfig.httpSnippet }}
          {{ . | nindent 2 }}
          {{- end }}

          server {
            listen             8080;

            {{- if .Values.gateway.basicAuth.enabled }}
            auth_basic           "Loki";
            auth_basic_user_file /etc/nginx/secrets/.htpasswd;
            {{- end }}

            location = / {
              return 200 'OK';
              auth_basic off;
              access_log off;
            }

            location = /api/prom/push {
              set $api_prom_push_backend http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $api_prom_push_backend:3100$request_uri;
              proxy_http_version 1.1;
            }

            location = /api/prom/tail {
              set $api_prom_tail_backend http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $api_prom_tail_backend:3100$request_uri;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
              proxy_http_version 1.1;
            }

            # Ruler
            location ~ /prometheus/api/v1/alerts.* {
              proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }
            location ~ /prometheus/api/v1/rules.* {
              proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }
            location ~ /api/prom/rules.* {
              proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }
            location ~ /api/prom/alerts.* {
              proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location ~ /api/prom/.* {
              set $api_prom_backend http://{{ include "loki.queryFrontendFullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $api_prom_backend:3100$request_uri;
              proxy_http_version 1.1;
            }

            location = /loki/api/v1/push {
              set $loki_api_v1_push_backend http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $loki_api_v1_push_backend:3100$request_uri;
              proxy_http_version 1.1;
            }

            location = /loki/api/v1/tail {
              set $loki_api_v1_tail_backend http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $loki_api_v1_tail_backend:3100$request_uri;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
              proxy_http_version 1.1;
            }

            location ~ /loki/api/.* {
              set $loki_api_backend http://{{ include "loki.queryFrontendFullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $loki_api_backend:3100$request_uri;
              proxy_http_version 1.1;
            }

            {{- with .Values.gateway.nginxConfig.serverSnippet }}
            {{ . | nindent 4 }}
            {{- end }}
          }
        }

  loki:
    image: 
      registry: docker.io
      repository: grafana/loki
      tag: 2.9.10
    podAnnotations:
      sidecar.istio.io/inject: "false"
    
    schemaConfig:
      configs:
      - from: "2020-09-07"
        store: boltdb-shipper
        object_store: filesystem
        schema: v11
        index:
          prefix: loki_index_
          period: 24h
    config: |
      auth_enabled: false

      server:
        {{- toYaml .Values.loki.server | nindent 6 }}

      common:
        compactor_address: http://{{ include "loki.compactorFullname" . }}:3100

      distributor:
        ring:
          kvstore:
            store: memberlist

      memberlist:
        join_members:
          - {{ include "loki.fullname" . }}-memberlist

      ingester_client:
        grpc_client_config:
          grpc_compression: gzip

      ingester:
        lifecycler:
          ring:
            kvstore:
              store: memberlist
            replication_factor: 1
        chunk_idle_period: 30m
        chunk_block_size: 262144
        chunk_encoding: snappy
        chunk_retain_period: 1m
        max_transfer_retries: 0
        wal:
          dir: /var/loki/wal

      limits_config:
        retention_period: 72h
        enforce_metric_name: false
        reject_old_samples: true
        reject_old_samples_max_age: 168h
        max_cache_freshness_per_query: 10m
        split_queries_by_interval: 24h
        # max_concurrent: 10
        # for big logs tune
        per_stream_rate_limit: 512M
        per_stream_rate_limit_burst: 1024M
        cardinality_limit: 200000
        ingestion_burst_size_mb: 1000
        ingestion_rate_mb: 10000
        max_entries_limit_per_query: 1000000
        max_label_value_length: 20480
        max_label_name_length: 10240
        max_label_names_per_series: 300

      {{- if .Values.loki.schemaConfig}}
      schema_config:
      {{- toYaml .Values.loki.schemaConfig | nindent 2}}
      {{- end}}
      {{- if .Values.loki.storageConfig}}
      storage_config:
      {{- if .Values.indexGateway.enabled}}
      {{- $indexGatewayClient := dict "server_address" (printf "dns:///%s:9095" (include "loki.indexGatewayFullname" .)) }}
      {{- $_ := set .Values.loki.storageConfig.boltdb_shipper "index_gateway_client" $indexGatewayClient }}
      {{- end}}
      {{- toYaml .Values.loki.storageConfig | nindent 2}}
      {{- if .Values.memcachedIndexQueries.enabled }}
        index_queries_cache_config:
          memcached_client:
            addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedIndexQueriesFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
            consistent_hash: true
      {{- end}}
      {{- end}}

      runtime_config:
        file: /var/{{ include "loki.name" . }}-runtime/runtime.yaml

      chunk_store_config:
        max_look_back_period: 0s
        {{- if .Values.memcachedChunks.enabled }}
        chunk_cache_config:
          embedded_cache:
            enabled: false
          memcached_client:
            consistent_hash: true
            addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedChunksFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
        {{- end }}
        {{- if .Values.memcachedIndexWrites.enabled }}
        write_dedupe_cache_config:
          memcached_client:
            consistent_hash: true
            addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedIndexWritesFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
        {{- end }}

      table_manager:
        retention_deletes_enabled: false
        retention_period: 0s

      query_range:
        align_queries_with_step: true
        max_retries: 5
        cache_results: true
        results_cache:
          cache:
            {{- if .Values.memcachedFrontend.enabled }}
            memcached_client:
              addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedFrontendFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
              consistent_hash: true
            {{- else }}
            embedded_cache:
              enabled: true
              ttl: 24h
            {{- end }}

      frontend_worker:
        {{- if .Values.queryScheduler.enabled }}
        scheduler_address: {{ include "loki.querySchedulerFullname" . }}:9095
        {{- else }}
        frontend_address: {{ include "loki.queryFrontendFullname" . }}-headless:9095
        {{- end }}

      frontend:
        log_queries_longer_than: 5s
        compress_responses: true
        {{- if .Values.queryScheduler.enabled }}
        scheduler_address: {{ include "loki.querySchedulerFullname" . }}:9095
        {{- end }}
        tail_proxy_url: http://{{ include "loki.querierFullname" . }}:3100

      compactor:
        working_directory: /var/loki/compactor
        shared_store: azure
        compaction_interval: 2m
        retention_enabled: false

      ruler:
        storage:
          type: local
          local:
            directory: /etc/loki/rules
        ring:
          kvstore:
            store: memberlist
        rule_path: /tmp/loki/scratch
        alertmanager_url: https://alertmanager.xx
        external_url: https://alertmanager.xx

  serviceAccount:
    create: true
    name: loki-sa
    imagePullSecrets: []
    labels: {}
    
    automountServiceAccountToken: true

  compactor:
    enabled: true
    retention_enabled: true
    persistence:
      enabled: false
      size: 3Gi
      storageClass: buildpiper-storage
    nodeSelector:
      environment: dev
      workload-type: on-demand
      team: devops
      node_group: monit-logging
    
  queryFrontend:
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
    resources:
      requests:
        memory: 500Mi
        cpu: 0.3
      limits:
        memory: 700Mi
        cpu: 0.5
    nodeSelector:
      environment: dev
      workload-type: on-demand
      team: devops
      node_group: monit-logging

  distributor:
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
    resources:
      requests:
        memory: 500Mi
        cpu: 0.3
      limits:
        memory: 700Mi
        cpu: 0.5
    nodeSelector:
      environment: dev
      workload-type: on-demand
      team: devops
      node_group: monit-logging

  ingester:
    replicas: 2
    maxUnavailable: 1
    persistence:
      enabled: true
      claims:
        - name: data
          size: 2Gi
          storageClass: buildpiper-storage
    resources:
      requests:
        memory: 500Mi
        cpu: 0.3
      limits:
        memory: 700Mi
        cpu: 0.5
    nodeSelector:
      environment: dev
      workload-type: on-demand
      team: devops
      node_group: monit-logging
    

  querier:
    kind: Deployment
    replicas: 1
    maxUnavailable: 1
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
    resources:
      requests:
        memory: 500Mi
        cpu: 0.3
      limits:
        memory: 700Mi
        cpu: 0.5
    nodeSelector:
      environment: dev
      workload-type: on-demand
      team: devops
      node_group: monit-logging

  memcachedChunks:
    enabled: true
    replicas: 1
    maxUnavailable: 1
    persistence:
      enabled: true
      size: 5Gi
      storageClass: buildpiper-storage
    extraArgs:
      - -m 2048
      - -I 32m
    resources:
      requests:
        memory: 500Mi
        cpu: 0.3
      limits:
        memory: 700Mi
        cpu: 0.5
    nodeSelector:
      environment: dev
      workload-type: on-demand
      team: devops
      node_group: monit-logging

  memcachedFrontend:
    enabled: true
    replicas: 1
    maxUnavailable: 1
    persistence:
      enabled: true
      size: 5Gi
      storageClass: buildpiper-storage
    extraArgs:
      - -m 2048
      - -I 32m
    resources:
      requests:
        memory: 600Mi
        cpu: 0.3
      limits:
        memory: 800Mi
        cpu: 0.5
    nodeSelector:
      environment: dev
      workload-type: on-demand
      team: devops
      node_group: monit-logging

  memcachedIndexQueries:
    enabled: true
    replicas: 1
    maxUnavailable: 1
    persistence:
      enabled: true
      size: 5Gi
      storageClass: buildpiper-storage
    extraArgs:
      - -m 2048
      - -I 32m
    resources:
      requests:
        memory: 500Mi
        cpu: 0.3
      limits:
        memory: 700Mi
        cpu: 0.5
    nodeSelector:
      environment: dev
      workload-type: on-demand
      team: devops
      node_group: monit-logging

  indexGateway:
    enabled: true
    replicas: 2
    maxUnavailable: 1
    persistence:
      enabled: true
      size: 10Gi
      storageClass: buildpiper-storage
    resources:
      requests:
        memory: 500Mi
        cpu: 0.3
      limits:
        memory: 700Mi
        cpu: 0.5
    nodeSelector:
      environment: dev
      workload-type: on-demand
      team: devops
      node_group: monit-logging

  serviceMonitor:
    enabled: false
    namespace: logging
    namespaceSelector:
      any: true
    labels:
      prometheus: kube

  prometheusRule:
    enabled: false
    namespace: logging
    annotations: {}
    labels:
      app: loki-kube-prometheus
      prometheus: kube
    groups: []  

promtail:
  image:
    registry: docker.io
    repository: grafana/promtail
    tag: 3.0.0
  config:
    logLevel: info
    clients:
      - url: http://logging-gateway.logging.svc.cluster.local/loki/api/v1/push

